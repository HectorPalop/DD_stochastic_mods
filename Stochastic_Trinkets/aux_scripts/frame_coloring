import cv2
import numpy as np
import os

class IridescentFrameGenerator:
    """
    A class for generating iridescent frames on images.
    """

    def __init__(self, input_image_path):
        """
        Initialize the IridescentFrameGenerator.

        Args:
            input_image_path (str): Path to the input image file.
        """
        self.script_dir = os.path.dirname(os.path.abspath(__file__))
        self.input_image_path = os.path.join(self.script_dir, input_image_path)
        
        if not os.path.exists(self.input_image_path):
            raise FileNotFoundError(f"Input image not found: {self.input_image_path}")
        
        self.image = cv2.imread(self.input_image_path)
        
        if self.image is None:
            raise IOError(f"Unable to read image file: {self.input_image_path}")
        
        self.height, self.width = self.image.shape[:2]
        self.bgr = self.image
        self.frame_mask = np.ones((self.height, self.width), dtype=np.uint8) * 255

    def create_frame_mask(self, thickness=5):
        """
        Create a frame mask for the image.

        Args:
            thickness (int): Thickness of the frame. Default is 5.

        Returns:
            numpy.ndarray: A binary mask representing the frame.
        """
        mask = np.zeros((self.height, self.width), dtype=np.uint8)
        cv2.rectangle(mask, (0, 0), (self.width-1, self.height-1), 255, thickness)
        return mask

    def create_iridescent_color_map(self):
        """
        Create an iridescent color map for the image.

        Returns:
            numpy.ndarray: An iridescent color map in BGR format.
        """
        color_map = np.zeros((self.height, self.width, 3), dtype=np.uint8)
        for y in range(self.height):
            for x in range(self.width):
                hue = int(180 * ((x + y) % self.width) / self.width)
                color_map[y, x] = [hue, 255, 255]
        return cv2.cvtColor(color_map, cv2.COLOR_HSV2BGR)

    def apply_iridescent_frame(self, outer_thickness=5, inner_thickness=3):
        """
        Apply an iridescent frame to the image.

        Args:
            outer_thickness (int): Thickness of the outer frame. Default is 5.
            inner_thickness (int): Thickness of the inner frame. Default is 3.

        Returns:
            numpy.ndarray: The image with an iridescent frame applied.
        """
        outer_mask = self.create_frame_mask(thickness=outer_thickness)
        inner_mask = self.create_frame_mask(thickness=inner_thickness)
        coloring_mask = outer_mask - inner_mask

        color_map = self.create_iridescent_color_map()

        result = self.bgr.copy()
        result[coloring_mask > 0] = color_map[coloring_mask > 0]

        # Add an alpha channel
        alpha = np.ones((self.height, self.width), dtype=np.uint8) * 255
        result_with_alpha = cv2.merge([result, alpha])

        return result_with_alpha

    def save_result(self, output_filename):
        """
        Save the resulting image with the iridescent frame as a PNG.

        Args:
            output_filename (str): Name of the output file.
        """
        result = self.apply_iridescent_frame()
        output_path = os.path.join(os.path.dirname(self.script_dir), 'mod_resources', output_filename)
        
        # Ensure the file extension is .png
        if not output_path.lower().endswith('.png'):
            output_path += '.png'
        
        cv2.imwrite(output_path, result)
        print(f"Image saved as: {output_path}")

if __name__ == "__main__":
    try:
        generator = IridescentFrameGenerator("frame_image.png")
        generator.save_result("rarity_stochastic")
        print("Iridescent frame generated successfully.")
    except Exception as e:
        print(f"An error occurred: {str(e)}")